"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _sine = require("./sine");

var sine = _interopRequireWildcard(_sine);

var _square = require("./square");

var square = _interopRequireWildcard(_square);

var _sawtooth = require("./sawtooth");

var sawtooth = _interopRequireWildcard(_sawtooth);

var _triangle = require("./triangle");

var triangle = _interopRequireWildcard(_triangle);

var _chiptune = require("./chiptune");

var chiptune = _interopRequireWildcard(_chiptune);

var _organ = require("./organ");

var organ = _interopRequireWildcard(_organ);

var _organ2 = require("./organ2");

var organ2 = _interopRequireWildcard(_organ2);

var _bass = require("./bass");

var bass = _interopRequireWildcard(_bass);

var _brass = require("./brass");

var brass = _interopRequireWildcard(_brass);

var _waveTables = require("@mohayonao/wave-tables");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

exports.default = Object.entries({
  sine: sine,
  square: square,
  square2: _waveTables.DroppedSquare,
  sawtooth: sawtooth,
  triangle: triangle,
  triangle2: _waveTables.WarmTriangle,
  chiptune: chiptune,
  organ: organ,
  organ2: organ2,
  organ3: _waveTables.Organ2,
  organ4: _waveTables.Organ3,
  organ5: _waveTables.Dissonant2,
  bass: bass,
  bass2: _waveTables.Bass,
  bass3: _waveTables.BassSubDub,
  bass4: _waveTables.BassFuzz2,
  brass: brass,
  brass2: _waveTables.Trombone,
  aah: _waveTables.PhonemeAh,
  ooh: _waveTables.PhonemeOoh,
  eeh: _waveTables.PhonemeEe,
  buzz: _waveTables.Buzzy1,
  buzz2: _waveTables.DynaEPBright,
  dissonance: _waveTables.DissonantPiano
}).reduce(function (obj, _ref) {
  var _ref2 = _slicedToArray(_ref, 2),
      type = _ref2[0],
      coefficients = _ref2[1];

  return Object.assign(obj, _defineProperty({}, type, createOscillator.bind(null, coefficients)));
}, {});


function createOscillator(_ref3, ctx) {
  var real = _ref3.real,
      imag = _ref3.imag;

  var oscillator = ctx.createOscillator();
  oscillator.setPeriodicWave(ctx.createPeriodicWave(Float32Array.from(real), Float32Array.from(imag)));
  return oscillator;
}